
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


export namespace temp { 
/**
 * 英雄品质
 */
export enum EQuality {
    /**
     * 白色
     */
    White = 1,
    /**
     * 绿色
     */
    Green = 2,
    /**
     * 蓝色
     */
    Blue = 3,
    /**
     * 紫色
     */
    Purple = 4,
    /**
     * 橙色
     */
    Orange = 5,
    /**
     * 红色
     */
    Red = 6,
}

} 
export namespace temp { 
/**
 * 武器类型
 */
export enum EWeaponType {
    /**
     * 近程武器
     */
    Short = 1,
    /**
     * 远程武器
     */
    Long = 2,
}

} 
export namespace temp { 
/**
 * 武器展示类型
 */
export enum EWeaponShowType {
    /**
     * 不需要显示
     */
    NotShow = 0,
    /**
     * 冷兵器
     */
    Cold = 1,
    /**
     * 枪械
     */
    Gun = 2,
    /**
     * 喷射武器
     */
    Jet = 3,
    /**
     * 激光武器
     */
    Laser = 4,
}

} 
export namespace temp { 
/**
 * 武器攻击类型
 */
export enum EWeaponAttackType {
    /**
     * 技能
     */
    Skill = 1,
    /**
     * 子弹
     */
    Bullet = 2,
}

} 
export namespace temp { 
/**
 * 技能调用者
 */
export enum ESkillCaller {
    /**
     * 公用
     */
    Public = 0,
    /**
     * 武器
     */
    Weapon = 1,
    /**
     * 英雄
     */
    Hero = 2,
    /**
     * 怪物
     */
    Monster = 3,
    /**
     * 召唤物
     */
    Creature = 4,
}

} 
export namespace temp { 
/**
 * 技能类型
 */
export enum ESkillType {
    /**
     * 主动技能
     */
    Active = 1,
    /**
     * 被动触发
     */
    PassiveTrigger = 2,
    /**
     * 被动参数
     */
    PassivePara = 4,
}

} 
export namespace temp { 
/**
 * 被动参数类型
 */
export enum EPassiveParaType {
    /**
     * 无
     */
    NoParaType = 0,
    /**
     * 武器
     */
    Weapon = 1,
    /**
     * 子弹
     */
    Bullet = 2,
    /**
     * 技能
     */
    Skill = 3,
    /**
     * 技能效果
     */
    SkillEffect = 4,
    /**
     * Buff效果
     */
    Buff = 5,
    /**
     * 召唤物
     */
    Creature = 6,
}

} 
export namespace temp { 
/**
 * 被动触发条件
 */
export enum ETriggerCondition {
    /**
     * 无
     */
    NoCondition = 0,
    /**
     * 武器攻击次数
     */
    WeaponAttack = 1,
    /**
     * 格挡触发
     */
    Block = 2,
    /**
     * 技能效果生效触发
     */
    SkillEffect = 3,
    /**
     * 换弹触发
     */
    Reload = 4,
    /**
     * 创生体死亡
     */
    CreatureDie = 5,
    /**
     * Buff结束
     */
    BuffEnd = 6,
    /**
     * 战斗开始
     */
    BattleStart = 7,
}

} 
export namespace temp { 
/**
 * 技能效果类型
 */
export enum ESkillEffectType {
    /**
     * 武器伤害
     */
    WeaponDam = 1,
    /**
     * 技能伤害
     */
    SkillDam = 2,
    /**
     * 传导伤害
     */
    ConductDam = 3,
    /**
     * 折射伤害
     */
    RefractionDam = 4,
    /**
     * 技能治疗
     */
    SkillHeal = 5,
    /**
     * 添加状态
     */
    AddBuff = 6,
    /**
     * 召唤
     */
    Call = 7,
}

} 
export namespace temp { 
/**
 * 技能效果影响范围
 */
export enum ESkillEffectRangeType {
    /**
     * 当前目标
     */
    CurrentTarget = 1,
    /**
     * 全场范围
     */
    EntireField = 2,
    /**
     * 被动效果触发者
     */
    Toucher = 3,
    /**
     * 矩形范围
     */
    Rectangle = 4,
    /**
     * 圆形范围
     */
    Circular = 5,
    /**
     * 自己
     */
    Self = 7,
    /**
     * 技能源头
     */
    Origin = 8,
}

} 
export namespace temp { 
/**
 * 技能效果影响阵营
 */
export enum EEffectTargetCamp {
    /**
     * 无
     */
    NoCamp = 0,
    /**
     * 队友
     */
    Teammate = 1,
    /**
     * 敌人
     */
    Enemy = 2,
}

} 
export namespace temp { 
/**
 * 技能效果目标筛选
 */
export enum EEffectTargetScreen {
    /**
     * 无
     */
    NotScreen = 0,
    /**
     * 所有
     */
    All = 1,
    /**
     * 当前生命值比例最低
     */
    HpLowestPer = 2,
    /**
     * 距离最近
     */
    Nearest = 3,
    /**
     * 随机选择
     */
    Random = 4,
}

} 
export namespace temp { 
/**
 * Buff类型
 */
export enum EBuffType {
    /**
     * 增益
     */
    Positive = 1,
    /**
     * 减益
     */
    Negative = 2,
}

} 
export namespace temp { 
/**
 * 相同Buff
 */
export enum EBuffSame {
    /**
     * 无效
     */
    Invalid = 1,
    /**
     * 刷新
     */
    Refresh = 2,
    /**
     * 叠加
     */
    Overlay = 3,
}

} 
export namespace temp { 
/**
 * 属性类型
 */
export enum EAttrValueType {
    /**
     * 整数
     */
    INT = 1,
    /**
     * 万分比
     */
    PERW = 2,
}

} 
export namespace temp { 
/**
 * 怪物类型
 */
export enum EMonsterType {
    /**
     * 无
     */
    NoType = 0,
    /**
     * 普通
     */
    NORMAL = 1,
    /**
     * 精英
     */
    ELITE = 2,
    /**
     * Boss
     */
    BOSS = 3,
}

} 
export namespace temp { 
/**
 * 怪物移动类型
 */
export enum EMoveType {
    /**
     * 地面怪
     */
    Ground = 1,
    /**
     * 飞行怪
     */
    Flying = 2,
}

} 
export namespace temp { 
/**
 * 子弹飞行轨迹类型
 */
export enum ETrajectoryType {
    /**
     * 直线
     */
    Line = 1,
    /**
     * 瞄准
     */
    Aim = 2,
    /**
     * 抛物线
     */
    Jump = 3,
}

} 
export namespace temp { 
/**
 * 子弹碰撞后处理
 */
export enum EBulletAfterCollide {
    /**
     * 移除
     */
    Remove = 0,
    /**
     * 穿透
     */
    Pass = 1,
    /**
     * 弹射
     */
    Bounce = 2,
}

} 
export namespace temp { 
/**
 * Rogue技能组
 */
export enum ERogueGroup {
    /**
     * 公共
     */
    Public = 1,
    /**
     * 武器
     */
    Weapon = 2,
    /**
     * 配件
     */
    Accessor = 3,
}

} 
export namespace temp { 
/**
 * 配件增幅范围
 */
export enum EAccessoryReachType {
    /**
     * 无加成
     */
    NoAdd = 0,
    /**
     * 横向相邻
     */
    Transverse = 1,
    /**
     * 纵向相邻
     */
    Direction = 2,
    /**
     * 四周相邻
     */
    Surround = 3,
}

} 
export namespace temp { 
/**
 * Block道具类型
 */
export enum EBlockItemType {
    /**
     * 武器
     */
    Weapon = 1,
    /**
     * 配件
     */
    Accessory = 2,
    /**
     * 格子
     */
    Grid = 3,
}

} 
export namespace temp { 
/**
 * 召唤物死亡类型
 */
export enum ECreatureDeadType {
    /**
     * 无
     */
    NotNeed = 0,
    /**
     * 当前生命=0死亡
     */
    Hp = 1,
    /**
     * 持续时间结束死亡
     */
    Duration = 2,
}

} 





export class TempItem {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.price === undefined) { throw new Error() }
        this.price = _json_.price
        if (_json_.upgrade_to_item_id === undefined) { throw new Error() }
        this.upgradeToItemId = _json_.upgrade_to_item_id
        if(_json_.expire_time != undefined) { this.expireTime = _json_.expire_time } else { this.expireTime = undefined }
        if (_json_.batch_useable === undefined) { throw new Error() }
        this.batchUseable = _json_.batch_useable
        if (_json_.exchange_stream === undefined) { throw new Error() }
        this.exchangeStream = new temp.ItemExchange(_json_.exchange_stream)
        if (_json_.exchange_list === undefined) { throw new Error() }
        { this.exchangeList = []; for(let _ele0 of _json_.exchange_list) { let _e0; _e0 = new temp.ItemExchange(_ele0); this.exchangeList.push(_e0);}}
        if (_json_.exchange_column === undefined) { throw new Error() }
        this.exchangeColumn = new temp.ItemExchange(_json_.exchange_column)
    }

    /**
     * 这是id
     */
    readonly id: number
    /**
     * 名字
     */
    readonly name: string
    /**
     * 描述
     */
    readonly desc: string
    /**
     * 价格
     */
    readonly price: number
    /**
     * 引用当前表
     */
    readonly upgradeToItemId: number
    upgradeToItemId_ref: TempItem | undefined
    /**
     * 过期时间
     */
    readonly expireTime: number|undefined
    /**
     * 能否批量使用
     */
    readonly batchUseable: boolean
    /**
     * 道具兑换配置
     */
    readonly exchangeStream: temp.ItemExchange
    readonly exchangeList: temp.ItemExchange[]
    /**
     * 道具兑换配置
     */
    readonly exchangeColumn: temp.ItemExchange

    resolve(tables:Tables)
    {
        
        
        
        
        this.upgradeToItemId_ref = tables.TbItem.get(this.upgradeToItemId)
        
        
        this.exchangeStream?.resolve(tables);
        for (let _e of this.exchangeList) { _e?.resolve(tables); }
        this.exchangeColumn?.resolve(tables);
    }
}




export namespace temp {
export class ItemExchange {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.num === undefined) { throw new Error() }
        this.num = _json_.num
    }

    /**
     * 道具id
     */
    readonly id: number
    /**
     * 道具数量
     */
    readonly num: number

    resolve(tables:Tables)
    {
        
        
    }
}

}



export class TempBubble {

    constructor(_json_: any) {
        if (_json_.idd === undefined) { throw new Error() }
        { this.idd = []; for(let _ele0 of _json_.idd) { let _e0; _e0 = _ele0; this.idd.push(_e0);}}
        if (_json_.name === undefined) { throw new Error() }
        { this.name = []; for(let _ele0 of _json_.name) { let _e0; _e0 = _ele0; this.name.push(_e0);}}
    }

    /**
     * 这是id
     */
    readonly idd: string[]
    /**
     * 名字
     */
    readonly name: string[]

    resolve(tables:Tables)
    {
        
        
    }
}





export class TempConstCar {

    constructor(_json_: any) {
        if (_json_.cameraOrthoHeight === undefined) { throw new Error() }
        this.cameraOrthoHeight = _json_.cameraOrthoHeight
        if (_json_.speedv1 === undefined) { throw new Error() }
        this.speedv1 = _json_.speedv1
        if (_json_.speedv2 === undefined) { throw new Error() }
        this.speedv2 = _json_.speedv2
        if (_json_.acc === undefined) { throw new Error() }
        this.acc = _json_.acc
        if (_json_.speedv3 === undefined) { throw new Error() }
        this.speedv3 = _json_.speedv3
        if (_json_.carStartPoint === undefined) { throw new Error() }
        this.carStartPoint = new temp.Vec2(_json_.carStartPoint)
        if (_json_.speedv4 === undefined) { throw new Error() }
        this.speedv4 = _json_.speedv4
        if (_json_.speedv5 === undefined) { throw new Error() }
        this.speedv5 = _json_.speedv5
        if (_json_.joystickAlpha === undefined) { throw new Error() }
        this.joystickAlpha = _json_.joystickAlpha
        if (_json_.shakeIntensity === undefined) { throw new Error() }
        this.shakeIntensity = _json_.shakeIntensity
        if (_json_.shakeFrequency === undefined) { throw new Error() }
        this.shakeFrequency = _json_.shakeFrequency
        if (_json_.shakeCount === undefined) { throw new Error() }
        this.shakeCount = _json_.shakeCount
        if (_json_.spawnPointDis === undefined) { throw new Error() }
        this.spawnPointDis = _json_.spawnPointDis
        if (_json_.killCount === undefined) { throw new Error() }
        this.killCount = _json_.killCount
        if (_json_.timeInterval === undefined) { throw new Error() }
        this.timeInterval = _json_.timeInterval
        if (_json_.posCD === undefined) { throw new Error() }
        this.posCD = _json_.posCD
        if (_json_.rotaCount === undefined) { throw new Error() }
        this.rotaCount = _json_.rotaCount
        if (_json_.rotaFrequency === undefined) { throw new Error() }
        this.rotaFrequency = _json_.rotaFrequency
        if (_json_.unitToPixel === undefined) { throw new Error() }
        this.unitToPixel = _json_.unitToPixel
        if (_json_.oilConsumption === undefined) { throw new Error() }
        this.oilConsumption = _json_.oilConsumption
        if (_json_.enemyDelay === undefined) { throw new Error() }
        this.enemyDelay = _json_.enemyDelay
    }

    /**
     * 摄像机角度
     */
    readonly cameraOrthoHeight: number
    /**
     * 基础速度
     */
    readonly speedv1: number
    /**
     * 最快速度
     */
    readonly speedv2: number
    /**
     * 加速度
     */
    readonly acc: number
    /**
     * 侧向移动速度
     */
    readonly speedv3: number
    /**
     * 车辆在界面中的相对位置
     */
    readonly carStartPoint: temp.Vec2
    /**
     * 弯道纵向速度
     */
    readonly speedv4: number
    /**
     * 弯道横向速度
     */
    readonly speedv5: number
    /**
     * 摇杆透明度
     */
    readonly joystickAlpha: number
    /**
     * 抖动强度
     */
    readonly shakeIntensity: number
    /**
     * 持续抖动间隔
     */
    readonly shakeFrequency: number
    /**
     * 抖动次数
     */
    readonly shakeCount: number
    /**
     * 刷怪点和车距离
     */
    readonly spawnPointDis: number
    /**
     * 单位时间连续撞击僵尸数量
     */
    readonly killCount: number
    /**
     * 判定周期
     */
    readonly timeInterval: number
    /**
     * 正反馈CD
     */
    readonly posCD: number
    /**
     * 每次正反馈车旋转几圈
     */
    readonly rotaCount: number
    /**
     * 每次正反馈车旋转一圈的时间
     */
    readonly rotaFrequency: number
    /**
     * 1单位距离等于多少px
     */
    readonly unitToPixel: number
    /**
     * 1单位距离消耗多少油
     */
    readonly oilConsumption: number
    /**
     * 每只怪刷新间隔
     */
    readonly enemyDelay: number

    resolve(tables:Tables)
    {
        
        
        
        
        
        this.carStartPoint?.resolve(tables);
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}




export namespace temp {
export class Vec2 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
    }

    /**
     * x坐标
     */
    readonly x: number
    /**
     * y坐标
     */
    readonly y: number

    resolve(tables:Tables)
    {
        
        
    }
}

}



export class TempConstCommon {

    constructor(_json_: any) {
        if (_json_.testlog === undefined) { throw new Error() }
        this.testlog = _json_.testlog
        if (_json_.formulaKeyWods === undefined) { throw new Error() }
        { this.formulaKeyWods = []; for(let _ele0 of _json_.formulaKeyWods) { let _e0; _e0 = _ele0; this.formulaKeyWods.push(_e0);}}
    }

    /**
     * 测试输出
     */
    readonly testlog: number
    /**
     * 公式关键词
     */
    readonly formulaKeyWods: string[]

    resolve(tables:Tables)
    {
        
        
    }
}





export class TempHero {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.heroId === undefined) { throw new Error() }
        this.heroId = _json_.heroId
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.icon === undefined) { throw new Error() }
        this.icon = _json_.icon
        if (_json_.camp === undefined) { throw new Error() }
        this.camp = _json_.camp
        if (_json_.quality === undefined) { throw new Error() }
        this.quality = _json_.quality
        if (_json_.baseSpeed === undefined) { throw new Error() }
        this.baseSpeed = _json_.baseSpeed
        if (_json_.defaultWeapon === undefined) { throw new Error() }
        this.defaultWeapon = _json_.defaultWeapon
        if (_json_.defaultSkin === undefined) { throw new Error() }
        this.defaultSkin = _json_.defaultSkin
        if (_json_.debrisGet === undefined) { throw new Error() }
        { this.debrisGet = []; for(let _ele0 of _json_.debrisGet) { let _e0; _e0 = new temp.IdNum(_ele0); this.debrisGet.push(_e0);}}
        if (_json_.skill === undefined) { throw new Error() }
        { this.skill = []; for(let _ele0 of _json_.skill) { let _e0; _e0 = _ele0; this.skill.push(_e0);}}
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 英雄ID
     */
    readonly heroId: number
    /**
     * 英雄名称
     */
    readonly name: string
    /**
     * 英雄描述
     */
    readonly desc: string
    /**
     * 英雄图标
     */
    readonly icon: string
    /**
     * 英雄阵营
     */
    readonly camp: number
    /**
     * 英雄品质
     */
    readonly quality: number
    /**
     * 基础移动速度（单位:像素/秒）
     */
    readonly baseSpeed: number
    /**
     * 默认武器
     */
    readonly defaultWeapon: number
    /**
     * 默认皮肤
     */
    readonly defaultSkin: number
    /**
     * 碎片拆分
     */
    readonly debrisGet: temp.IdNum[]
    /**
     * 怒气技能
     */
    readonly skill: number[]

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
        
        for (let _e of this.debrisGet) { _e?.resolve(tables); }
        
    }
}




export namespace temp {
export class IdNum {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.num === undefined) { throw new Error() }
        this.num = _json_.num
    }

    /**
     * 道具id
     */
    readonly id: number
    /**
     * 道具数量
     */
    readonly num: number

    resolve(tables:Tables)
    {
        
        
    }
}

}



export class TempHeroSkin {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.icon === undefined) { throw new Error() }
        this.icon = _json_.icon
    }

    /**
     * 皮肤ID
     */
    readonly id: number
    /**
     * 皮肤名称
     */
    readonly name: string
    /**
     * 皮肤描述
     */
    readonly desc: string
    /**
     * 皮肤资源
     */
    readonly icon: string

    resolve(tables:Tables)
    {
        
        
        
        
    }
}





export class TempHeroLevel {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.heroId === undefined) { throw new Error() }
        this.heroId = _json_.heroId
        if (_json_.level === undefined) { throw new Error() }
        this.level = _json_.level
        if (_json_.need === undefined) { throw new Error() }
        { this.need = []; for(let _ele0 of _json_.need) { let _e0; _e0 = new temp.IdNum(_ele0); this.need.push(_e0);}}
        if (_json_.attr === undefined) { throw new Error() }
        this.attr = new Map<number, number>(); for(var _entry0_ of _json_.attr) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.attr.set(_k0, _v0);  }
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 英雄ID
     */
    readonly heroId: number
    /**
     * 英雄等级
     */
    readonly level: number
    /**
     * 升级消耗
     */
    readonly need: temp.IdNum[]
    /**
     * 英雄属性
     */
    readonly attr: Map<number, number>

    resolve(tables:Tables)
    {
        
        
        
        for (let _e of this.need) { _e?.resolve(tables); }
        
    }
}





export class TempHeroBreak {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.breakLv === undefined) { throw new Error() }
        this.breakLv = _json_.breakLv
        if (_json_.need === undefined) { throw new Error() }
        { this.need = []; for(let _ele0 of _json_.need) { let _e0; _e0 = new temp.IdNum(_ele0); this.need.push(_e0);}}
        if (_json_.attribute === undefined) { throw new Error() }
        { this.attribute = []; for(let _ele0 of _json_.attribute) { let _e0; _e0 = new temp.AttrVal(_ele0); this.attribute.push(_e0);}}
        if (_json_.reward === undefined) { throw new Error() }
        { this.reward = []; for(let _ele0 of _json_.reward) { let _e0; _e0 = new temp.IdNum(_ele0); this.reward.push(_e0);}}
    }

    /**
     * 英雄ID
     */
    readonly id: number
    /**
     * 英雄突破等级
     */
    readonly breakLv: number
    /**
     * 突破消耗
     */
    readonly need: temp.IdNum[]
    /**
     * 英雄属性
     */
    readonly attribute: temp.AttrVal[]
    /**
     * 突破奖励
     */
    readonly reward: temp.IdNum[]

    resolve(tables:Tables)
    {
        
        
        for (let _e of this.need) { _e?.resolve(tables); }
        for (let _e of this.attribute) { _e?.resolve(tables); }
        for (let _e of this.reward) { _e?.resolve(tables); }
    }
}




export namespace temp {
export class AttrVal {

    constructor(_json_: any) {
        if (_json_.attr === undefined) { throw new Error() }
        this.attr = _json_.attr
        if (_json_.val === undefined) { throw new Error() }
        this.val = _json_.val
    }

    /**
     * 属性id
     */
    readonly attr: number
    /**
     * 属性值
     */
    readonly val: number

    resolve(tables:Tables)
    {
        
        
    }
}

}



export class TempHeroStar {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.star === undefined) { throw new Error() }
        this.star = _json_.star
        if (_json_.need === undefined) { throw new Error() }
        { this.need = []; for(let _ele0 of _json_.need) { let _e0; _e0 = new temp.IdNum(_ele0); this.need.push(_e0);}}
        if (_json_.attribute === undefined) { throw new Error() }
        { this.attribute = []; for(let _ele0 of _json_.attribute) { let _e0; _e0 = new temp.AttrVal(_ele0); this.attribute.push(_e0);}}
    }

    /**
     * 英雄ID
     */
    readonly id: number
    /**
     * 英雄星级
     */
    readonly star: number
    /**
     * 升星消耗
     */
    readonly need: temp.IdNum[]
    /**
     * 英雄属性
     */
    readonly attribute: temp.AttrVal[]

    resolve(tables:Tables)
    {
        
        
        for (let _e of this.need) { _e?.resolve(tables); }
        for (let _e of this.attribute) { _e?.resolve(tables); }
    }
}





export class TempHeroSkill {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.level === undefined) { throw new Error() }
        this.level = _json_.level
        if (_json_.starlevel === undefined) { throw new Error() }
        this.starlevel = _json_.starlevel
        if (_json_.effect === undefined) { throw new Error() }
        this.effect = _json_.effect
    }

    /**
     * 技能组ID
     */
    readonly id: number
    /**
     * 技能等级
     */
    readonly level: number
    /**
     * 星级解锁
     */
    readonly starlevel: number
    /**
     * 技能效果
     */
    readonly effect: number

    resolve(tables:Tables)
    {
        
        
        
        
    }
}





export class TempWeapon {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.weaponId === undefined) { throw new Error() }
        this.weaponId = _json_.weaponId
        if (_json_.level === undefined) { throw new Error() }
        this.level = _json_.level
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.icon === undefined) { throw new Error() }
        this.icon = _json_.icon
        if (_json_.resource === undefined) { throw new Error() }
        this.resource = _json_.resource
        if (_json_.type === undefined) { throw new Error() }
        this.type = _json_.type
        if (_json_.showType === undefined) { throw new Error() }
        this.showType = _json_.showType
        if (_json_.ifGuide === undefined) { throw new Error() }
        this.ifGuide = _json_.ifGuide
        if (_json_.warnRange === undefined) { throw new Error() }
        this.warnRange = _json_.warnRange
        if (_json_.interval === undefined) { throw new Error() }
        this.interval = _json_.interval
        if (_json_.distance === undefined) { throw new Error() }
        this.distance = _json_.distance
        if (_json_.magazine === undefined) { throw new Error() }
        this.magazine = _json_.magazine
        if (_json_.changeTime === undefined) { throw new Error() }
        this.changeTime = _json_.changeTime
        if (_json_.triggerTime === undefined) { throw new Error() }
        this.triggerTime = _json_.triggerTime
        if (_json_.energyGet === undefined) { throw new Error() }
        this.energyGet = _json_.energyGet
        if (_json_.attackEffect === undefined) { throw new Error() }
        this.attackEffect = _json_.attackEffect
        if (_json_.attackEffectPara === undefined) { throw new Error() }
        this.attackEffectPara = _json_.attackEffectPara
        if (_json_.weaponAttribute === undefined) { throw new Error() }
        this.weaponAttribute = _json_.weaponAttribute
        if (_json_.weaponSkills === undefined) { throw new Error() }
        this.weaponSkills = _json_.weaponSkills
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 武器ID
     */
    readonly weaponId: number
    /**
     * 武器等级
     */
    readonly level: number
    /**
     * 武器名称
     */
    readonly name: string
    /**
     * 武器描述
     */
    readonly desc: string
    /**
     * 武器图标
     */
    readonly icon: string
    /**
     * 武器外显
     */
    readonly resource: string
    /**
     * 武器类型
     */
    readonly type: temp.EWeaponType
    /**
     * 界面展示类型
     */
    readonly showType: temp.EWeaponShowType
    /**
     * 是否需要引导
     */
    readonly ifGuide: boolean
    /**
     * 警戒范围
     */
    readonly warnRange: number
    /**
     * 攻击/射击时间间隔（单位：ms)
     */
    readonly interval: number
    /**
     * 攻击/射击距离
     */
    readonly distance: number
    /**
     * 弹匣容量
     */
    readonly magazine: number
    /**
     * 换弹时间（单位：ms)
     */
    readonly changeTime: number
    /**
     * 攻击效果触发时间（万分比）
     */
    readonly triggerTime: number
    /**
     * 能量恢复
     */
    readonly energyGet: number
    /**
     * 攻击效果类型
     */
    readonly attackEffect: temp.EWeaponAttackType
    /**
     * 攻击效果参数
     */
    readonly attackEffectPara: string
    /**
     * 武器属性
     */
    readonly weaponAttribute: string
    /**
     * 武器技能
     */
    readonly weaponSkills: string

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class TempSkill {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.icon === undefined) { throw new Error() }
        this.icon = _json_.icon
        if (_json_.skillAction === undefined) { throw new Error() }
        this.skillAction = _json_.skillAction
        if (_json_.skillCaller === undefined) { throw new Error() }
        this.skillCaller = _json_.skillCaller
        if (_json_.skillCallerPara === undefined) { throw new Error() }
        this.skillCallerPara = _json_.skillCallerPara
        if (_json_.SkillType === undefined) { throw new Error() }
        this.SkillType = _json_.SkillType
        if (_json_.PassiveParaType === undefined) { throw new Error() }
        this.PassiveParaType = _json_.PassiveParaType
        if (_json_.PassiveParaPara === undefined) { throw new Error() }
        { this.PassiveParaPara = []; for(let _ele0 of _json_.PassiveParaPara) { let _e0; _e0 = _ele0; this.PassiveParaPara.push(_e0);}}
        if (_json_.triggerCondition === undefined) { throw new Error() }
        this.triggerCondition = _json_.triggerCondition
        if (_json_.triggerConditionPara === undefined) { throw new Error() }
        { this.triggerConditionPara = []; for(let _ele0 of _json_.triggerConditionPara) { let _e0; _e0 = _ele0; this.triggerConditionPara.push(_e0);}}
        if (_json_.triggerProbability === undefined) { throw new Error() }
        this.triggerProbability = _json_.triggerProbability
        if (_json_.skillEffects === undefined) { throw new Error() }
        { this.skillEffects = []; for(let _ele0 of _json_.skillEffects) { let _e0; _e0 = _ele0; this.skillEffects.push(_e0);}}
        if (_json_.coolTime === undefined) { throw new Error() }
        this.coolTime = _json_.coolTime
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 技能名称
     */
    readonly name: string
    /**
     * 技能描述
     */
    readonly desc: string
    /**
     * 技能图标
     */
    readonly icon: string
    /**
     * 技能动作
     */
    readonly skillAction: number
    /**
     * 技能调用单位类型
     */
    readonly skillCaller: temp.ESkillCaller
    /**
     * 技能调用单位参数
     */
    readonly skillCallerPara: number
    /**
     * 技能类型
     */
    readonly SkillType: temp.ESkillType
    /**
     * 被动属性类型
     */
    readonly PassiveParaType: temp.EPassiveParaType
    /**
     * 被动属性类型
     */
    readonly PassiveParaPara: number[]
    /**
     * 被动触发条件
     */
    readonly triggerCondition: temp.ETriggerCondition
    /**
     * 被动触发条件参数
     */
    readonly triggerConditionPara: number[]
    /**
     * 被动触发概率
     */
    readonly triggerProbability: number
    /**
     * 技能效果
     */
    readonly skillEffects: number[]
    /**
     * 技能CD
     */
    readonly coolTime: number

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class TempSkillEffect {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.triggerParticleEffects === undefined) { throw new Error() }
        this.triggerParticleEffects = _json_.triggerParticleEffects
        if (_json_.triggerResult === undefined) { throw new Error() }
        this.triggerResult = _json_.triggerResult
        if (_json_.triggerEffectPara === undefined) { throw new Error() }
        { this.triggerEffectPara = []; for(let _ele0 of _json_.triggerEffectPara) { let _e0; _e0 = _ele0; this.triggerEffectPara.push(_e0);}}
        if (_json_.targetRange === undefined) { throw new Error() }
        this.targetRange = _json_.targetRange
        if (_json_.targetRangePara === undefined) { throw new Error() }
        { this.targetRangePara = []; for(let _ele0 of _json_.targetRangePara) { let _e0; _e0 = _ele0; this.targetRangePara.push(_e0);}}
        if (_json_.targetCamp === undefined) { throw new Error() }
        this.targetCamp = _json_.targetCamp
        if (_json_.targetCondition === undefined) { throw new Error() }
        this.targetCondition = _json_.targetCondition
        if (_json_.targetNum === undefined) { throw new Error() }
        this.targetNum = _json_.targetNum
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 效果特效
     */
    readonly triggerParticleEffects: number
    /**
     * 技能效果
     */
    readonly triggerResult: temp.ESkillEffectType
    /**
     * 技能效果参数
     */
    readonly triggerEffectPara: string[]
    /**
     * 目标选择范围
     */
    readonly targetRange: temp.ESkillEffectRangeType
    /**
     * 选择范围参数
     */
    readonly targetRangePara: number[]
    /**
     * 目标阵营
     */
    readonly targetCamp: temp.EEffectTargetCamp
    /**
     * 筛选条件
     */
    readonly targetCondition: temp.EEffectTargetScreen
    /**
     * 目标选择数量
     */
    readonly targetNum: number

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
    }
}





export class TempBuff {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.icon === undefined) { throw new Error() }
        this.icon = _json_.icon
        if (_json_.artEffect === undefined) { throw new Error() }
        this.artEffect = _json_.artEffect
        if (_json_.buffType === undefined) { throw new Error() }
        this.buffType = _json_.buffType
        if (_json_.buffDuration === undefined) { throw new Error() }
        this.buffDuration = _json_.buffDuration
        if (_json_.buffState === undefined) { throw new Error() }
        this.buffState = _json_.buffState
        if (_json_.buffStatePara === undefined) { throw new Error() }
        this.buffStatePara = new Map<number, number>(); for(var _entry0_ of _json_.buffStatePara) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.buffStatePara.set(_k0, _v0);  }
        if (_json_.getSame === undefined) { throw new Error() }
        this.getSame = _json_.getSame
        if (_json_.overlayLimit === undefined) { throw new Error() }
        this.overlayLimit = _json_.overlayLimit
        if (_json_.ifDispel === undefined) { throw new Error() }
        this.ifDispel = _json_.ifDispel
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * Buff名称
     */
    readonly name: string
    /**
     * Buff图标
     */
    readonly icon: string
    /**
     * Buff特效
     */
    readonly artEffect: string
    /**
     * Buff类型
     */
    readonly buffType: temp.EBuffType
    /**
     * Buff持续时间（ms)
     */
    readonly buffDuration: number
    /**
     * Buff状态
     */
    readonly buffState: number
    /**
     * Buff状态参数
     */
    readonly buffStatePara: Map<number, number>
    /**
     * 相同Buff处理
     */
    readonly getSame: temp.EBuffSame
    /**
     * 叠加上限
     */
    readonly overlayLimit: number
    /**
     * 是否允许被驱散
     */
    readonly ifDispel: boolean

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class TempBattleAttr {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.attrValueType === undefined) { throw new Error() }
        this.attrValueType = _json_.attrValueType
        if (_json_.inFight === undefined) { throw new Error() }
        this.inFight = _json_.inFight
        if (_json_.isFormula === undefined) { throw new Error() }
        this.isFormula = _json_.isFormula
        if (_json_.formula === undefined) { throw new Error() }
        this.formula = _json_.formula
        if (_json_.showName === undefined) { throw new Error() }
        this.showName = _json_.showName
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 属性字段
     */
    readonly name: string
    /**
     * 属性描述
     */
    readonly desc: string
    /**
     * 属性值类型
     */
    readonly attrValueType: temp.EAttrValueType
    /**
     * 是否是战斗内属性
     */
    readonly inFight: boolean
    /**
     * 是否公式
     */
    readonly isFormula: boolean
    /**
     * 计算属性
     */
    readonly formula: string
    /**
     * 显示名字
     */
    readonly showName: string

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
    }
}





export class TempEnemyPrototype {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.type === undefined) { throw new Error() }
        this.type = _json_.type
        if (_json_.moveType === undefined) { throw new Error() }
        this.moveType = _json_.moveType
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.icon === undefined) { throw new Error() }
        this.icon = _json_.icon
        if (_json_.resource === undefined) { throw new Error() }
        this.resource = _json_.resource
        if (_json_.priority === undefined) { throw new Error() }
        this.priority = _json_.priority
        if (_json_.baseSpeed === undefined) { throw new Error() }
        this.baseSpeed = _json_.baseSpeed
        if (_json_.defaultWeapon === undefined) { throw new Error() }
        this.defaultWeapon = _json_.defaultWeapon
        if (_json_.activeSkills === undefined) { throw new Error() }
        { this.activeSkills = []; for(let _ele0 of _json_.activeSkills) { let _e0; _e0 = _ele0; this.activeSkills.push(_e0);}}
        if (_json_.passiveSkills === undefined) { throw new Error() }
        { this.passiveSkills = []; for(let _ele0 of _json_.passiveSkills) { let _e0; _e0 = _ele0; this.passiveSkills.push(_e0);}}
        if (_json_.moveSpeedCar === undefined) { throw new Error() }
        this.moveSpeedCar = _json_.moveSpeedCar
        if (_json_.jumpSpeedCar === undefined) { throw new Error() }
        this.jumpSpeedCar = _json_.jumpSpeedCar
        if (_json_.jumpHeightCar === undefined) { throw new Error() }
        this.jumpHeightCar = _json_.jumpHeightCar
        if (_json_.baseRogue === undefined) { throw new Error() }
        this.baseRogue = _json_.baseRogue
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 怪物名称
     */
    readonly name: string
    /**
     * 怪物类型
     */
    readonly type: temp.EMonsterType
    /**
     * 怪物行动类型
     */
    readonly moveType: temp.EMoveType
    /**
     * 描述
     */
    readonly desc: string
    /**
     * 头像
     */
    readonly icon: string
    /**
     * 资源
     */
    readonly resource: string
    /**
     * 受击优先级
     */
    readonly priority: number
    /**
     * 基础移动速(单位：像素/s)
     */
    readonly baseSpeed: number
    /**
     * 默认武器
     */
    readonly defaultWeapon: number
    /**
     * 主动技能
     */
    readonly activeSkills: number[]
    /**
     * 被动技能
     */
    readonly passiveSkills: number[]
    /**
     * 开车移动速度
     */
    readonly moveSpeedCar: number
    /**
     * 开车腾空速度
     */
    readonly jumpSpeedCar: number
    /**
     * 开车腾空高度
     */
    readonly jumpHeightCar: number
    /**
     * 基础肉鸽值
     */
    readonly baseRogue: number

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class TempEnemy {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.pid === undefined) { throw new Error() }
        this.pid = _json_.pid
        if (_json_.attr === undefined) { throw new Error() }
        this.attr = new Map<number, number>(); for(var _entry0_ of _json_.attr) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.attr.set(_k0, _v0);  }
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 原型id
     */
    readonly pid: number
    pid_ref: TempEnemyPrototype | undefined
    /**
     * 属性
     */
    readonly attr: Map<number, number>

    resolve(tables:Tables)
    {
        
        this.pid_ref = tables.TbEnemyPrototype.get(this.pid)
        
    }
}





export class TempChapterSummary {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * name
     */
    readonly name: string

    resolve(tables:Tables)
    {
        
        
    }
}





export class TempStageSummary {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.chapterId === undefined) { throw new Error() }
        this.chapterId = _json_.chapterId
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.RefreshId === undefined) { throw new Error() }
        this.RefreshId = _json_.RefreshId
        if (_json_.PublicRogueSkillId === undefined) { throw new Error() }
        this.PublicRogueSkillId = _json_.PublicRogueSkillId
        if (_json_.privateGridLen === undefined) { throw new Error() }
        { this.privateGridLen = []; for(let _ele0 of _json_.privateGridLen) { let _e0; _e0 = _ele0; this.privateGridLen.push(_e0);}}
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 章节id
     */
    readonly chapterId: number
    chapterId_ref: TempChapterSummary | undefined
    /**
     * name
     */
    readonly name: string
    /**
     * 武器刷新ID
     */
    readonly RefreshId: number
    /**
     * 公共Rouge技能库
     */
    readonly PublicRogueSkillId: number
    /**
     * 初始格子长度
     */
    readonly privateGridLen: number[]

    resolve(tables:Tables)
    {
        
        this.chapterId_ref = tables.TbChapterSummary.get(this.chapterId)
        
        
        
        
    }
}





export class TempStage {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.cid === undefined) { throw new Error() }
        this.cid = _json_.cid
        if (_json_.spawnPoint === undefined) { throw new Error() }
        this.spawnPoint = _json_.spawnPoint
        if (_json_.mid === undefined) { throw new Error() }
        this.mid = _json_.mid
        if (_json_.count === undefined) { throw new Error() }
        this.count = _json_.count
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 关卡id
     */
    readonly cid: number
    cid_ref: TempStageSummary | undefined
    /**
     * 出怪点编号
     */
    readonly spawnPoint: number
    /**
     * 怪物编号
     */
    readonly mid: number
    mid_ref: TempEnemy | undefined
    /**
     * 怪物数量
     */
    readonly count: number

    resolve(tables:Tables)
    {
        
        this.cid_ref = tables.TbStageSummary.get(this.cid)
        
        this.mid_ref = tables.TbEnemy.get(this.mid)
        
    }
}





export class TempCar {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.res === undefined) { throw new Error() }
        this.res = _json_.res
        if (_json_.oil === undefined) { throw new Error() }
        this.oil = _json_.oil
        if (_json_.attr === undefined) { throw new Error() }
        this.attr = new Map<number, number>(); for(var _entry0_ of _json_.attr) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.attr.set(_k0, _v0);  }
        if (_json_.damageFactor === undefined) { throw new Error() }
        this.damageFactor = _json_.damageFactor
        if (_json_.defendRange === undefined) { throw new Error() }
        this.defendRange = _json_.defendRange
        if (_json_.heroNum === undefined) { throw new Error() }
        this.heroNum = _json_.heroNum
        if (_json_.seatPosArr === undefined) { throw new Error() }
        { this.seatPosArr = []; for(let _ele0 of _json_.seatPosArr) { let _e0; _e0 = new temp.Vec2(_ele0); this.seatPosArr.push(_e0);}}
        if (_json_.defendPosArr === undefined) { throw new Error() }
        { this.defendPosArr = []; for(let _ele0 of _json_.defendPosArr) { let _e0; _e0 = new temp.Vec2(_ele0); this.defendPosArr.push(_e0);}}
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 美术资源
     */
    readonly res: string
    /**
     * 油量
     */
    readonly oil: number
    /**
     * 属性
     */
    readonly attr: Map<number, number>
    /**
     * 伤害系数
     */
    readonly damageFactor: number
    /**
     * 驻守范围
     */
    readonly defendRange: number
    /**
     * 上阵数量
     */
    readonly heroNum: number
    /**
     * 座位坐标
     */
    readonly seatPosArr: temp.Vec2[]
    /**
     * 防守点坐标
     */
    readonly defendPosArr: temp.Vec2[]

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        for (let _e of this.seatPosArr) { _e?.resolve(tables); }
        for (let _e of this.defendPosArr) { _e?.resolve(tables); }
    }
}





export class TempFormula {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.formula === undefined) { throw new Error() }
        this.formula = _json_.formula
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 属性字段
     */
    readonly name: string
    /**
     * 属性描述
     */
    readonly desc: string
    /**
     * 计算属性
     */
    readonly formula: string

    resolve(tables:Tables)
    {
        
        
        
        
    }
}





export class TempObstacle {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.res === undefined) { throw new Error() }
        this.res = _json_.res
        if (_json_.damageType === undefined) { throw new Error() }
        this.damageType = _json_.damageType
        if (_json_.damageAni === undefined) { throw new Error() }
        this.damageAni = _json_.damageAni
        if (_json_.minDispAngle === undefined) { throw new Error() }
        this.minDispAngle = _json_.minDispAngle
        if (_json_.speed === undefined) { throw new Error() }
        this.speed = _json_.speed
        if (_json_.distance === undefined) { throw new Error() }
        this.distance = _json_.distance
        if (_json_.selfRotation === undefined) { throw new Error() }
        this.selfRotation = _json_.selfRotation
        if (_json_.attr === undefined) { throw new Error() }
        this.attr = new Map<number, number>(); for(var _entry0_ of _json_.attr) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.attr.set(_k0, _v0);  }
        if (_json_.damageFactor === undefined) { throw new Error() }
        this.damageFactor = _json_.damageFactor
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 美术资源
     */
    readonly res: string
    /**
     * 撞毁后类型
     */
    readonly damageType: number
    /**
     * 撞毁动画
     */
    readonly damageAni: string
    /**
     * 位移最小角度
     */
    readonly minDispAngle: number
    /**
     * 位移速度
     */
    readonly speed: number
    /**
     * 位移距离
     */
    readonly distance: number
    /**
     * 自身旋转角度
     */
    readonly selfRotation: number
    /**
     * 属性
     */
    readonly attr: Map<number, number>
    /**
     * 伤害系数
     */
    readonly damageFactor: number

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
        
    }
}





export class TempBullet {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.bulletType === undefined) { throw new Error() }
        this.bulletType = _json_.bulletType
        if (_json_.bulletResource === undefined) { throw new Error() }
        this.bulletResource = _json_.bulletResource
        if (_json_.ballisticNum === undefined) { throw new Error() }
        this.ballisticNum = _json_.ballisticNum
        if (_json_.ballistic === undefined) { throw new Error() }
        this.ballistic = _json_.ballistic
        if (_json_.fireNum === undefined) { throw new Error() }
        this.fireNum = _json_.fireNum
        if (_json_.fireNumDisTime === undefined) { throw new Error() }
        this.fireNumDisTime = _json_.fireNumDisTime
        if (_json_.speed === undefined) { throw new Error() }
        this.speed = _json_.speed
        if (_json_.trajectoryType === undefined) { throw new Error() }
        this.trajectoryType = _json_.trajectoryType
        if (_json_.targetCamp === undefined) { throw new Error() }
        this.targetCamp = _json_.targetCamp
        if (_json_.skillEffect === undefined) { throw new Error() }
        this.skillEffect = _json_.skillEffect
        if (_json_.afterCollide === undefined) { throw new Error() }
        this.afterCollide = _json_.afterCollide
        if (_json_.afterCollidePara === undefined) { throw new Error() }
        this.afterCollidePara = _json_.afterCollidePara
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 子弹类型
     */
    readonly bulletType: number
    /**
     * 子弹资源
     */
    readonly bulletResource: string
    /**
     * 弹道数量
     */
    readonly ballisticNum: number
    /**
     * 弹道角度
     */
    readonly ballistic: number
    /**
     * 连射数量
     */
    readonly fireNum: number
    /**
     * 连射间隔时间（毫秒ms）
     */
    readonly fireNumDisTime: number
    /**
     * 子弹飞行速度
     */
    readonly speed: number
    /**
     * 子弹飞行轨迹
     */
    readonly trajectoryType: temp.ETrajectoryType
    /**
     * 目标阵营
     */
    readonly targetCamp: number
    /**
     * 技能效果
     */
    readonly skillEffect: number
    /**
     * 碰撞后处理
     */
    readonly afterCollide: temp.EBulletAfterCollide
    /**
     * 碰撞后处理参数
     */
    readonly afterCollidePara: number

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class TempRogueSkill {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.Group === undefined) { throw new Error() }
        this.Group = _json_.Group
        if (_json_.GroupPara === undefined) { throw new Error() }
        this.GroupPara = _json_.GroupPara
        if (_json_.preId === undefined) { throw new Error() }
        { this.preId = []; for(let _ele0 of _json_.preId) { let _e0; _e0 = _ele0; this.preId.push(_e0);}}
        if (_json_.repelId === undefined) { throw new Error() }
        { this.repelId = []; for(let _ele0 of _json_.repelId) { let _e0; _e0 = _ele0; this.repelId.push(_e0);}}
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.quality === undefined) { throw new Error() }
        this.quality = _json_.quality
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.weight === undefined) { throw new Error() }
        this.weight = _json_.weight
        if (_json_.targetRangePara === undefined) { throw new Error() }
        { this.targetRangePara = []; for(let _ele0 of _json_.targetRangePara) { let _e0; _e0 = _ele0; this.targetRangePara.push(_e0);}}
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 技能组
     */
    readonly Group: temp.ERogueGroup
    /**
     * 组别参数
     */
    readonly GroupPara: number
    /**
     * 前置ID
     */
    readonly preId: number[]
    /**
     * 互斥ID
     */
    readonly repelId: number[]
    /**
     * 名称
     */
    readonly name: string
    /**
     * 品质
     */
    readonly quality: temp.EQuality
    /**
     * 描述
     */
    readonly desc: string
    /**
     * 随机权重
     */
    readonly weight: number
    /**
     * 解锁技能ID
     */
    readonly targetRangePara: number[]

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
        
    }
}





export class TempAccessory {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.accessoryId === undefined) { throw new Error() }
        this.accessoryId = _json_.accessoryId
        if (_json_.level === undefined) { throw new Error() }
        this.level = _json_.level
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.icon === undefined) { throw new Error() }
        this.icon = _json_.icon
        if (_json_.shape === undefined) { throw new Error() }
        this.shape = _json_.shape
        if (_json_.accessorySkills === undefined) { throw new Error() }
        this.accessorySkills = _json_.accessorySkills
        if (_json_.reachType === undefined) { throw new Error() }
        this.reachType = _json_.reachType
        if (_json_.reachNum === undefined) { throw new Error() }
        this.reachNum = _json_.reachNum
        if (_json_.reachSkills === undefined) { throw new Error() }
        this.reachSkills = _json_.reachSkills
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 配件ID
     */
    readonly accessoryId: number
    /**
     * 配件等级
     */
    readonly level: number
    /**
     * 配件名称
     */
    readonly name: string
    /**
     * 配件描述
     */
    readonly desc: string
    /**
     * 配件图标
     */
    readonly icon: string
    /**
     * 配件形状
     */
    readonly shape: number
    /**
     * 配件基础技能
     */
    readonly accessorySkills: number
    /**
     * 增幅范围
     */
    readonly reachType: temp.EAccessoryReachType
    /**
     * 增幅数量
     */
    readonly reachNum: number
    /**
     * 增幅技能
     */
    readonly reachSkills: number

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class TempBlockGrid {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.privateGridLen === undefined) { throw new Error() }
        { this.privateGridLen = []; for(let _ele0 of _json_.privateGridLen) { let _e0; _e0 = _ele0; this.privateGridLen.push(_e0);}}
        if (_json_.maxGridLen === undefined) { throw new Error() }
        { this.maxGridLen = []; for(let _ele0 of _json_.maxGridLen) { let _e0; _e0 = _ele0; this.maxGridLen.push(_e0);}}
        if (_json_.privateGridWidth === undefined) { throw new Error() }
        { this.privateGridWidth = []; for(let _ele0 of _json_.privateGridWidth) { let _e0; _e0 = _ele0; this.privateGridWidth.push(_e0);}}
        if (_json_.picture === undefined) { throw new Error() }
        this.picture = _json_.picture
        if (_json_.privateSpace === undefined) { throw new Error() }
        this.privateSpace = _json_.privateSpace
        if (_json_.privateGrid === undefined) { throw new Error() }
        { this.privateGrid = []; for(let _ele0 of _json_.privateGrid) { let _e0; { _e0 = []; for(let _ele1 of _ele0) { let _e1; _e1 = _ele1; _e0.push(_e1);}}; this.privateGrid.push(_e0);}}
        if (_json_.maxGrid === undefined) { throw new Error() }
        { this.maxGrid = []; for(let _ele0 of _json_.maxGrid) { let _e0; { _e0 = []; for(let _ele1 of _ele0) { let _e1; _e1 = _ele1; _e0.push(_e1);}}; this.maxGrid.push(_e0);}}
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 名字
     */
    readonly name: string
    /**
     * 初始格子长度
     */
    readonly privateGridLen: number[]
    /**
     * 最大格子长度
     */
    readonly maxGridLen: number[]
    /**
     * 格子宽度高度
     */
    readonly privateGridWidth: number[]
    /**
     * 图片
     */
    readonly picture: string
    /**
     * 空隙
     */
    readonly privateSpace: number
    /**
     * 初始格子
     */
    readonly privateGrid: number[][]
    /**
     * 初始格子
     */
    readonly maxGrid: number[][]

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
    }
}





export class TempBlockItem {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.icon === undefined) { throw new Error() }
        this.icon = _json_.icon
        if (_json_.type === undefined) { throw new Error() }
        this.type = _json_.type
        if (_json_.group === undefined) { throw new Error() }
        this.group = _json_.group
        if (_json_.level === undefined) { throw new Error() }
        this.level = _json_.level
        if (_json_.targetId === undefined) { throw new Error() }
        this.targetId = _json_.targetId
        if (_json_.shapeType === undefined) { throw new Error() }
        { this.shapeType = []; for(let _ele0 of _json_.shapeType) { let _e0; _e0 = _ele0; this.shapeType.push(_e0);}}
        if (_json_.shapeTypePara === undefined) { throw new Error() }
        { this.shapeTypePara = []; for(let _ele0 of _json_.shapeTypePara) { let _e0; { _e0 = []; for(let _ele1 of _ele0) { let _e1; _e1 = _ele1; _e0.push(_e1);}}; this.shapeTypePara.push(_e0);}}
        if (_json_.compoundId === undefined) { throw new Error() }
        this.compoundId = _json_.compoundId
        if (_json_.optionsNum === undefined) { throw new Error() }
        this.optionsNum = _json_.optionsNum
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 名字
     */
    readonly name: string
    /**
     * 道具图标
     */
    readonly icon: string
    /**
     * 道具类型
     */
    readonly type: temp.EBlockItemType
    /**
     * 分组
     */
    readonly group: number
    /**
     * 等级
     */
    readonly level: number
    /**
     * 对应道具id
     */
    readonly targetId: number
    /**
     * Block道具类型
     */
    readonly shapeType: number[]
    /**
     * Block道具类型参数
     */
    readonly shapeTypePara: number[][]
    /**
     * 合成后物品ID
     */
    readonly compoundId: number
    /**
     * 随机权重
     */
    readonly optionsNum: number

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class TempBlockRefreshLevel {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.refreshId === undefined) { throw new Error() }
        this.refreshId = _json_.refreshId
        if (_json_.refreshLevel === undefined) { throw new Error() }
        this.refreshLevel = _json_.refreshLevel
        if (_json_.blockItemLevel === undefined) { throw new Error() }
        this.blockItemLevel = _json_.blockItemLevel
        if (_json_.weight === undefined) { throw new Error() }
        this.weight = _json_.weight
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 刷新ID
     */
    readonly refreshId: number
    /**
     * 刷新等级
     */
    readonly refreshLevel: number
    /**
     * BlockItem等级
     */
    readonly blockItemLevel: number
    /**
     * 刷新权重
     */
    readonly weight: number

    resolve(tables:Tables)
    {
        
        
        
        
        
    }
}





export class TempBlockRefreshLibrary {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.blockItemLevel === undefined) { throw new Error() }
        this.blockItemLevel = _json_.blockItemLevel
        if (_json_.blockItemId === undefined) { throw new Error() }
        this.blockItemId = _json_.blockItemId
        if (_json_.weight === undefined) { throw new Error() }
        this.weight = _json_.weight
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * BlockItem等级
     */
    readonly blockItemLevel: number
    /**
     * Block道具ID
     */
    readonly blockItemId: number
    /**
     * 刷新权重
     */
    readonly weight: number

    resolve(tables:Tables)
    {
        
        
        
        
    }
}





export class TempRoguePara {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.para === undefined) { throw new Error() }
        this.para = _json_.para
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 参数
     */
    readonly para: string

    resolve(tables:Tables)
    {
        
        
    }
}





export class TempPublicRogueSkill {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.Group === undefined) { throw new Error() }
        this.Group = _json_.Group
        if (_json_.preId === undefined) { throw new Error() }
        { this.preId = []; for(let _ele0 of _json_.preId) { let _e0; _e0 = _ele0; this.preId.push(_e0);}}
        if (_json_.repelId === undefined) { throw new Error() }
        { this.repelId = []; for(let _ele0 of _json_.repelId) { let _e0; _e0 = _ele0; this.repelId.push(_e0);}}
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.quality === undefined) { throw new Error() }
        this.quality = _json_.quality
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.weight === undefined) { throw new Error() }
        this.weight = _json_.weight
        if (_json_.targetRangePara === undefined) { throw new Error() }
        { this.targetRangePara = []; for(let _ele0 of _json_.targetRangePara) { let _e0; _e0 = _ele0; this.targetRangePara.push(_e0);}}
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 技能组
     */
    readonly Group: number
    /**
     * 前置ID
     */
    readonly preId: number[]
    /**
     * 互斥ID
     */
    readonly repelId: number[]
    /**
     * 名称
     */
    readonly name: string
    /**
     * 品质
     */
    readonly quality: temp.EQuality
    /**
     * 描述
     */
    readonly desc: string
    /**
     * 随机权重
     */
    readonly weight: number
    /**
     * 解锁技能ID
     */
    readonly targetRangePara: number[]

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
    }
}





export class TempState {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.stateExclusion === undefined) { throw new Error() }
        { this.stateExclusion = []; for(let _ele0 of _json_.stateExclusion) { let _e0; _e0 = _ele0; this.stateExclusion.push(_e0);}}
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 状态互斥
     */
    readonly stateExclusion: number[]

    resolve(tables:Tables)
    {
        
        
    }
}





export class TempStageTd {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.cid === undefined) { throw new Error() }
        this.cid = _json_.cid
        if (_json_.wave === undefined) { throw new Error() }
        this.wave = _json_.wave
        if (_json_.refreshTime === undefined) { throw new Error() }
        this.refreshTime = _json_.refreshTime
        if (_json_.spawnPoint === undefined) { throw new Error() }
        this.spawnPoint = _json_.spawnPoint
        if (_json_.radius === undefined) { throw new Error() }
        this.radius = _json_.radius
        if (_json_.mid === undefined) { throw new Error() }
        this.mid = _json_.mid
        if (_json_.count === undefined) { throw new Error() }
        this.count = _json_.count
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 关卡id
     */
    readonly cid: number
    cid_ref: TempStageSummary | undefined
    /**
     * 波次
     */
    readonly wave: number
    /**
     * 刷新时间
     */
    readonly refreshTime: number
    /**
     * 出怪点编号
     */
    readonly spawnPoint: number
    /**
     * 刷怪半径
     */
    readonly radius: number
    /**
     * 怪物编号
     */
    readonly mid: number
    mid_ref: TempEnemy | undefined
    /**
     * 怪物数量
     */
    readonly count: number

    resolve(tables:Tables)
    {
        
        this.cid_ref = tables.TbStageSummary.get(this.cid)
        
        
        
        
        this.mid_ref = tables.TbEnemy.get(this.mid)
        
    }
}





export class TempCreature {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.moveType === undefined) { throw new Error() }
        this.moveType = _json_.moveType
        if (_json_.resource === undefined) { throw new Error() }
        this.resource = _json_.resource
        if (_json_.ifAttack === undefined) { throw new Error() }
        this.ifAttack = _json_.ifAttack
        if (_json_.baseSpeed === undefined) { throw new Error() }
        this.baseSpeed = _json_.baseSpeed
        if (_json_.defaultWeapon === undefined) { throw new Error() }
        this.defaultWeapon = _json_.defaultWeapon
        if (_json_.activeSkills === undefined) { throw new Error() }
        { this.activeSkills = []; for(let _ele0 of _json_.activeSkills) { let _e0; _e0 = _ele0; this.activeSkills.push(_e0);}}
        if (_json_.passiveSkills === undefined) { throw new Error() }
        { this.passiveSkills = []; for(let _ele0 of _json_.passiveSkills) { let _e0; _e0 = _ele0; this.passiveSkills.push(_e0);}}
        if (_json_.dieType === undefined) { throw new Error() }
        this.dieType = _json_.dieType
        if (_json_.dieTypePara === undefined) { throw new Error() }
        this.dieTypePara = _json_.dieTypePara
        if (_json_.attrInherit === undefined) { throw new Error() }
        this.attrInherit = new Map<number, number>(); for(var _entry0_ of _json_.attrInherit) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.attrInherit.set(_k0, _v0);  }
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 召唤物名称
     */
    readonly name: string
    /**
     * 行动类型
     */
    readonly moveType: temp.EMoveType
    /**
     * 资源
     */
    readonly resource: string
    /**
     * 是否可被攻击
     */
    readonly ifAttack: boolean
    /**
     * 基础移动速(单位：像素/s)
     */
    readonly baseSpeed: number
    /**
     * 默认武器
     */
    readonly defaultWeapon: number
    /**
     * 主动技能
     */
    readonly activeSkills: number[]
    /**
     * 被动技能
     */
    readonly passiveSkills: number[]
    /**
     * 召唤物死亡类型
     */
    readonly dieType: temp.ECreatureDeadType
    /**
     * 召唤物死亡类型参数
     */
    readonly dieTypePara: number
    /**
     * 召唤物属性继承参数
     */
    readonly attrInherit: Map<number, number>

    resolve(tables:Tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class TempStageTdb {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.cid === undefined) { throw new Error() }
        this.cid = _json_.cid
        if (_json_.wave === undefined) { throw new Error() }
        this.wave = _json_.wave
        if (_json_.waveInterval === undefined) { throw new Error() }
        this.waveInterval = _json_.waveInterval
        if (_json_.monsterGroup === undefined) { throw new Error() }
        { this.monsterGroup = []; for(let _ele0 of _json_.monsterGroup) { let _e0; _e0 = _ele0; this.monsterGroup.push(_e0);}}
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 关卡id
     */
    readonly cid: number
    cid_ref: TempStageSummary | undefined
    /**
     * 波次
     */
    readonly wave: number
    /**
     * 波次之间的时间间隔
     */
    readonly waveInterval: number
    /**
     * 怪物组ID
     */
    readonly monsterGroup: number[]

    resolve(tables:Tables)
    {
        
        this.cid_ref = tables.TbStageSummary.get(this.cid)
        
        
        
    }
}





export class TempMonsterGroup {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.startTime === undefined) { throw new Error() }
        this.startTime = _json_.startTime
        if (_json_.refreshInterval === undefined) { throw new Error() }
        this.refreshInterval = _json_.refreshInterval
        if (_json_.mid === undefined) { throw new Error() }
        this.mid = _json_.mid
        if (_json_.count === undefined) { throw new Error() }
        this.count = _json_.count
        if (_json_.spawnPoint === undefined) { throw new Error() }
        { this.spawnPoint = []; for(let _ele0 of _json_.spawnPoint) { let _e0; _e0 = _ele0; this.spawnPoint.push(_e0);}}
    }

    /**
     * 怪物组ID
     */
    readonly id: number
    /**
     * 刷新开始时间
     */
    readonly startTime: number
    /**
     * 刷新间隔
     */
    readonly refreshInterval: number
    /**
     * 怪物ID
     */
    readonly mid: number
    mid_ref: TempEnemy | undefined
    /**
     * 怪物数量
     */
    readonly count: number
    /**
     * 随机刷新点
     */
    readonly spawnPoint: number[]

    resolve(tables:Tables)
    {
        
        
        
        this.mid_ref = tables.TbEnemy.get(this.mid)
        
        
    }
}





export namespace temp {
/**
 * 测试表
 */
export class TbItem{
    private _dataMap: Map<number, TempItem>
    private _dataList: TempItem[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempItem>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempItem
            _v = new TempItem(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempItem> { return this._dataMap; }
    getDataList(): TempItem[] { return this._dataList; }

    get(key: number): TempItem | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
/**
 * 测试表
 */
export class TbBubble{
    private _dataList: TempBubble[]
    
    constructor(_json_: any) {
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempBubble
            _v = new TempBubble(_json2_)
            this._dataList.push(_v)
        }
    }

    getDataList(): TempBubble[] { return this._dataList }

    get(index: number): TempBubble | undefined { return this._dataList[index] }
    
    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbConstCar{
    private _dataMap: Map<number, TempConstCar>
    private _dataList: TempConstCar[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempConstCar>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempConstCar
            _v = new TempConstCar(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.cameraOrthoHeight, _v)
        }
    }

    getDataMap(): Map<number, TempConstCar> { return this._dataMap; }
    getDataList(): TempConstCar[] { return this._dataList; }

    get(key: number): TempConstCar | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbConstCommon{
    private _dataMap: Map<number, TempConstCommon>
    private _dataList: TempConstCommon[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempConstCommon>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempConstCommon
            _v = new TempConstCommon(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.testlog, _v)
        }
    }

    getDataMap(): Map<number, TempConstCommon> { return this._dataMap; }
    getDataList(): TempConstCommon[] { return this._dataList; }

    get(key: number): TempConstCommon | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbHero{
    private _dataMap: Map<number, TempHero>
    private _dataList: TempHero[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempHero>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempHero
            _v = new TempHero(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempHero> { return this._dataMap; }
    getDataList(): TempHero[] { return this._dataList; }

    get(key: number): TempHero | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbHeroSkin{
    private _dataMap: Map<number, TempHeroSkin>
    private _dataList: TempHeroSkin[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempHeroSkin>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempHeroSkin
            _v = new TempHeroSkin(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempHeroSkin> { return this._dataMap; }
    getDataList(): TempHeroSkin[] { return this._dataList; }

    get(key: number): TempHeroSkin | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbHeroLevel{
    private _dataMap: Map<number, TempHeroLevel>
    private _dataList: TempHeroLevel[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempHeroLevel>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempHeroLevel
            _v = new TempHeroLevel(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempHeroLevel> { return this._dataMap; }
    getDataList(): TempHeroLevel[] { return this._dataList; }

    get(key: number): TempHeroLevel | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbHeroBreak{
    private _dataMap: Map<number, TempHeroBreak>
    private _dataList: TempHeroBreak[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempHeroBreak>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempHeroBreak
            _v = new TempHeroBreak(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempHeroBreak> { return this._dataMap; }
    getDataList(): TempHeroBreak[] { return this._dataList; }

    get(key: number): TempHeroBreak | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbHeroStar{
    private _dataMap: Map<number, TempHeroStar>
    private _dataList: TempHeroStar[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempHeroStar>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempHeroStar
            _v = new TempHeroStar(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempHeroStar> { return this._dataMap; }
    getDataList(): TempHeroStar[] { return this._dataList; }

    get(key: number): TempHeroStar | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbHeroSkill{
    private _dataMap: Map<number, TempHeroSkill>
    private _dataList: TempHeroSkill[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempHeroSkill>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempHeroSkill
            _v = new TempHeroSkill(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempHeroSkill> { return this._dataMap; }
    getDataList(): TempHeroSkill[] { return this._dataList; }

    get(key: number): TempHeroSkill | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbWeapon{
    private _dataMap: Map<number, TempWeapon>
    private _dataList: TempWeapon[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempWeapon>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempWeapon
            _v = new TempWeapon(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempWeapon> { return this._dataMap; }
    getDataList(): TempWeapon[] { return this._dataList; }

    get(key: number): TempWeapon | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbSkill{
    private _dataMap: Map<number, TempSkill>
    private _dataList: TempSkill[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempSkill>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempSkill
            _v = new TempSkill(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempSkill> { return this._dataMap; }
    getDataList(): TempSkill[] { return this._dataList; }

    get(key: number): TempSkill | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbSkillEffect{
    private _dataMap: Map<number, TempSkillEffect>
    private _dataList: TempSkillEffect[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempSkillEffect>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempSkillEffect
            _v = new TempSkillEffect(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempSkillEffect> { return this._dataMap; }
    getDataList(): TempSkillEffect[] { return this._dataList; }

    get(key: number): TempSkillEffect | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbBuff{
    private _dataMap: Map<number, TempBuff>
    private _dataList: TempBuff[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempBuff>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempBuff
            _v = new TempBuff(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempBuff> { return this._dataMap; }
    getDataList(): TempBuff[] { return this._dataList; }

    get(key: number): TempBuff | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbBattleAttr{
    private _dataMap: Map<number, TempBattleAttr>
    private _dataList: TempBattleAttr[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempBattleAttr>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempBattleAttr
            _v = new TempBattleAttr(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempBattleAttr> { return this._dataMap; }
    getDataList(): TempBattleAttr[] { return this._dataList; }

    get(key: number): TempBattleAttr | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbEnemyPrototype{
    private _dataMap: Map<number, TempEnemyPrototype>
    private _dataList: TempEnemyPrototype[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempEnemyPrototype>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempEnemyPrototype
            _v = new TempEnemyPrototype(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempEnemyPrototype> { return this._dataMap; }
    getDataList(): TempEnemyPrototype[] { return this._dataList; }

    get(key: number): TempEnemyPrototype | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbEnemy{
    private _dataMap: Map<number, TempEnemy>
    private _dataList: TempEnemy[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempEnemy>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempEnemy
            _v = new TempEnemy(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempEnemy> { return this._dataMap; }
    getDataList(): TempEnemy[] { return this._dataList; }

    get(key: number): TempEnemy | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbChapterSummary{
    private _dataMap: Map<number, TempChapterSummary>
    private _dataList: TempChapterSummary[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempChapterSummary>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempChapterSummary
            _v = new TempChapterSummary(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempChapterSummary> { return this._dataMap; }
    getDataList(): TempChapterSummary[] { return this._dataList; }

    get(key: number): TempChapterSummary | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbStageSummary{
    private _dataMap: Map<number, TempStageSummary>
    private _dataList: TempStageSummary[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempStageSummary>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempStageSummary
            _v = new TempStageSummary(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempStageSummary> { return this._dataMap; }
    getDataList(): TempStageSummary[] { return this._dataList; }

    get(key: number): TempStageSummary | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbStage{
    private _dataMap: Map<number, TempStage>
    private _dataList: TempStage[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempStage>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempStage
            _v = new TempStage(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempStage> { return this._dataMap; }
    getDataList(): TempStage[] { return this._dataList; }

    get(key: number): TempStage | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbCar{
    private _dataMap: Map<number, TempCar>
    private _dataList: TempCar[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempCar>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempCar
            _v = new TempCar(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempCar> { return this._dataMap; }
    getDataList(): TempCar[] { return this._dataList; }

    get(key: number): TempCar | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbFormula{
    private _dataMap: Map<number, TempFormula>
    private _dataList: TempFormula[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempFormula>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempFormula
            _v = new TempFormula(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempFormula> { return this._dataMap; }
    getDataList(): TempFormula[] { return this._dataList; }

    get(key: number): TempFormula | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbObstacle{
    private _dataMap: Map<number, TempObstacle>
    private _dataList: TempObstacle[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempObstacle>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempObstacle
            _v = new TempObstacle(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempObstacle> { return this._dataMap; }
    getDataList(): TempObstacle[] { return this._dataList; }

    get(key: number): TempObstacle | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbBullet{
    private _dataMap: Map<number, TempBullet>
    private _dataList: TempBullet[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempBullet>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempBullet
            _v = new TempBullet(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempBullet> { return this._dataMap; }
    getDataList(): TempBullet[] { return this._dataList; }

    get(key: number): TempBullet | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbRogueSkill{
    private _dataMap: Map<number, TempRogueSkill>
    private _dataList: TempRogueSkill[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempRogueSkill>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempRogueSkill
            _v = new TempRogueSkill(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempRogueSkill> { return this._dataMap; }
    getDataList(): TempRogueSkill[] { return this._dataList; }

    get(key: number): TempRogueSkill | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbAccessory{
    private _dataMap: Map<number, TempAccessory>
    private _dataList: TempAccessory[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempAccessory>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempAccessory
            _v = new TempAccessory(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempAccessory> { return this._dataMap; }
    getDataList(): TempAccessory[] { return this._dataList; }

    get(key: number): TempAccessory | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbBlockGrid{
    private _dataMap: Map<number, TempBlockGrid>
    private _dataList: TempBlockGrid[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempBlockGrid>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempBlockGrid
            _v = new TempBlockGrid(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempBlockGrid> { return this._dataMap; }
    getDataList(): TempBlockGrid[] { return this._dataList; }

    get(key: number): TempBlockGrid | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbBlockItem{
    private _dataMap: Map<number, TempBlockItem>
    private _dataList: TempBlockItem[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempBlockItem>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempBlockItem
            _v = new TempBlockItem(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempBlockItem> { return this._dataMap; }
    getDataList(): TempBlockItem[] { return this._dataList; }

    get(key: number): TempBlockItem | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbBlockRefreshLevel{
    private _dataMap: Map<number, TempBlockRefreshLevel>
    private _dataList: TempBlockRefreshLevel[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempBlockRefreshLevel>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempBlockRefreshLevel
            _v = new TempBlockRefreshLevel(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempBlockRefreshLevel> { return this._dataMap; }
    getDataList(): TempBlockRefreshLevel[] { return this._dataList; }

    get(key: number): TempBlockRefreshLevel | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbBlockRefreshLibrary{
    private _dataMap: Map<number, TempBlockRefreshLibrary>
    private _dataList: TempBlockRefreshLibrary[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempBlockRefreshLibrary>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempBlockRefreshLibrary
            _v = new TempBlockRefreshLibrary(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempBlockRefreshLibrary> { return this._dataMap; }
    getDataList(): TempBlockRefreshLibrary[] { return this._dataList; }

    get(key: number): TempBlockRefreshLibrary | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbRoguePara{
    private _dataMap: Map<number, TempRoguePara>
    private _dataList: TempRoguePara[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempRoguePara>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempRoguePara
            _v = new TempRoguePara(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempRoguePara> { return this._dataMap; }
    getDataList(): TempRoguePara[] { return this._dataList; }

    get(key: number): TempRoguePara | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbPublicRogueSkill{
    private _dataMap: Map<number, TempPublicRogueSkill>
    private _dataList: TempPublicRogueSkill[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempPublicRogueSkill>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempPublicRogueSkill
            _v = new TempPublicRogueSkill(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempPublicRogueSkill> { return this._dataMap; }
    getDataList(): TempPublicRogueSkill[] { return this._dataList; }

    get(key: number): TempPublicRogueSkill | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbState{
    private _dataMap: Map<number, TempState>
    private _dataList: TempState[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempState>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempState
            _v = new TempState(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempState> { return this._dataMap; }
    getDataList(): TempState[] { return this._dataList; }

    get(key: number): TempState | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbStageTd{
    private _dataMap: Map<number, TempStageTd>
    private _dataList: TempStageTd[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempStageTd>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempStageTd
            _v = new TempStageTd(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempStageTd> { return this._dataMap; }
    getDataList(): TempStageTd[] { return this._dataList; }

    get(key: number): TempStageTd | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbCreature{
    private _dataMap: Map<number, TempCreature>
    private _dataList: TempCreature[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempCreature>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempCreature
            _v = new TempCreature(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempCreature> { return this._dataMap; }
    getDataList(): TempCreature[] { return this._dataList; }

    get(key: number): TempCreature | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbStageTdb{
    private _dataMap: Map<number, TempStageTdb>
    private _dataList: TempStageTdb[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempStageTdb>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempStageTdb
            _v = new TempStageTdb(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempStageTdb> { return this._dataMap; }
    getDataList(): TempStageTdb[] { return this._dataList; }

    get(key: number): TempStageTdb | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace temp {
export class TbMonsterGroup{
    private _dataMap: Map<number, TempMonsterGroup>
    private _dataList: TempMonsterGroup[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, TempMonsterGroup>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: TempMonsterGroup
            _v = new TempMonsterGroup(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, TempMonsterGroup> { return this._dataMap; }
    getDataList(): TempMonsterGroup[] { return this._dataList; }

    get(key: number): TempMonsterGroup | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables)
    {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}



type JsonLoader = (file: string) => any

export class Tables {
    private _TbItem: temp.TbItem
    /**
     * 测试表
     */
    get TbItem(): temp.TbItem  { return this._TbItem;}
    private _TbBubble: temp.TbBubble
    /**
     * 测试表
     */
    get TbBubble(): temp.TbBubble  { return this._TbBubble;}
    private _TbConstCar: temp.TbConstCar
    get TbConstCar(): temp.TbConstCar  { return this._TbConstCar;}
    private _TbConstCommon: temp.TbConstCommon
    get TbConstCommon(): temp.TbConstCommon  { return this._TbConstCommon;}
    private _TbHero: temp.TbHero
    get TbHero(): temp.TbHero  { return this._TbHero;}
    private _TbHeroSkin: temp.TbHeroSkin
    get TbHeroSkin(): temp.TbHeroSkin  { return this._TbHeroSkin;}
    private _TbHeroLevel: temp.TbHeroLevel
    get TbHeroLevel(): temp.TbHeroLevel  { return this._TbHeroLevel;}
    private _TbHeroBreak: temp.TbHeroBreak
    get TbHeroBreak(): temp.TbHeroBreak  { return this._TbHeroBreak;}
    private _TbHeroStar: temp.TbHeroStar
    get TbHeroStar(): temp.TbHeroStar  { return this._TbHeroStar;}
    private _TbHeroSkill: temp.TbHeroSkill
    get TbHeroSkill(): temp.TbHeroSkill  { return this._TbHeroSkill;}
    private _TbWeapon: temp.TbWeapon
    get TbWeapon(): temp.TbWeapon  { return this._TbWeapon;}
    private _TbSkill: temp.TbSkill
    get TbSkill(): temp.TbSkill  { return this._TbSkill;}
    private _TbSkillEffect: temp.TbSkillEffect
    get TbSkillEffect(): temp.TbSkillEffect  { return this._TbSkillEffect;}
    private _TbBuff: temp.TbBuff
    get TbBuff(): temp.TbBuff  { return this._TbBuff;}
    private _TbBattleAttr: temp.TbBattleAttr
    get TbBattleAttr(): temp.TbBattleAttr  { return this._TbBattleAttr;}
    private _TbEnemyPrototype: temp.TbEnemyPrototype
    get TbEnemyPrototype(): temp.TbEnemyPrototype  { return this._TbEnemyPrototype;}
    private _TbEnemy: temp.TbEnemy
    get TbEnemy(): temp.TbEnemy  { return this._TbEnemy;}
    private _TbChapterSummary: temp.TbChapterSummary
    get TbChapterSummary(): temp.TbChapterSummary  { return this._TbChapterSummary;}
    private _TbStageSummary: temp.TbStageSummary
    get TbStageSummary(): temp.TbStageSummary  { return this._TbStageSummary;}
    private _TbStage: temp.TbStage
    get TbStage(): temp.TbStage  { return this._TbStage;}
    private _TbCar: temp.TbCar
    get TbCar(): temp.TbCar  { return this._TbCar;}
    private _TbFormula: temp.TbFormula
    get TbFormula(): temp.TbFormula  { return this._TbFormula;}
    private _TbObstacle: temp.TbObstacle
    get TbObstacle(): temp.TbObstacle  { return this._TbObstacle;}
    private _TbBullet: temp.TbBullet
    get TbBullet(): temp.TbBullet  { return this._TbBullet;}
    private _TbRogueSkill: temp.TbRogueSkill
    get TbRogueSkill(): temp.TbRogueSkill  { return this._TbRogueSkill;}
    private _TbAccessory: temp.TbAccessory
    get TbAccessory(): temp.TbAccessory  { return this._TbAccessory;}
    private _TbBlockGrid: temp.TbBlockGrid
    get TbBlockGrid(): temp.TbBlockGrid  { return this._TbBlockGrid;}
    private _TbBlockItem: temp.TbBlockItem
    get TbBlockItem(): temp.TbBlockItem  { return this._TbBlockItem;}
    private _TbBlockRefreshLevel: temp.TbBlockRefreshLevel
    get TbBlockRefreshLevel(): temp.TbBlockRefreshLevel  { return this._TbBlockRefreshLevel;}
    private _TbBlockRefreshLibrary: temp.TbBlockRefreshLibrary
    get TbBlockRefreshLibrary(): temp.TbBlockRefreshLibrary  { return this._TbBlockRefreshLibrary;}
    private _TbRoguePara: temp.TbRoguePara
    get TbRoguePara(): temp.TbRoguePara  { return this._TbRoguePara;}
    private _TbPublicRogueSkill: temp.TbPublicRogueSkill
    get TbPublicRogueSkill(): temp.TbPublicRogueSkill  { return this._TbPublicRogueSkill;}
    private _TbState: temp.TbState
    get TbState(): temp.TbState  { return this._TbState;}
    private _TbStageTd: temp.TbStageTd
    get TbStageTd(): temp.TbStageTd  { return this._TbStageTd;}
    private _TbCreature: temp.TbCreature
    get TbCreature(): temp.TbCreature  { return this._TbCreature;}
    private _TbStageTdb: temp.TbStageTdb
    get TbStageTdb(): temp.TbStageTdb  { return this._TbStageTdb;}
    private _TbMonsterGroup: temp.TbMonsterGroup
    get TbMonsterGroup(): temp.TbMonsterGroup  { return this._TbMonsterGroup;}

    constructor(loader: JsonLoader) {
        this._TbItem = new temp.TbItem(loader('temp_tbitem'))
        this._TbBubble = new temp.TbBubble(loader('temp_tbbubble'))
        this._TbConstCar = new temp.TbConstCar(loader('temp_tbconstcar'))
        this._TbConstCommon = new temp.TbConstCommon(loader('temp_tbconstcommon'))
        this._TbHero = new temp.TbHero(loader('temp_tbhero'))
        this._TbHeroSkin = new temp.TbHeroSkin(loader('temp_tbheroskin'))
        this._TbHeroLevel = new temp.TbHeroLevel(loader('temp_tbherolevel'))
        this._TbHeroBreak = new temp.TbHeroBreak(loader('temp_tbherobreak'))
        this._TbHeroStar = new temp.TbHeroStar(loader('temp_tbherostar'))
        this._TbHeroSkill = new temp.TbHeroSkill(loader('temp_tbheroskill'))
        this._TbWeapon = new temp.TbWeapon(loader('temp_tbweapon'))
        this._TbSkill = new temp.TbSkill(loader('temp_tbskill'))
        this._TbSkillEffect = new temp.TbSkillEffect(loader('temp_tbskilleffect'))
        this._TbBuff = new temp.TbBuff(loader('temp_tbbuff'))
        this._TbBattleAttr = new temp.TbBattleAttr(loader('temp_tbbattleattr'))
        this._TbEnemyPrototype = new temp.TbEnemyPrototype(loader('temp_tbenemyprototype'))
        this._TbEnemy = new temp.TbEnemy(loader('temp_tbenemy'))
        this._TbChapterSummary = new temp.TbChapterSummary(loader('temp_tbchaptersummary'))
        this._TbStageSummary = new temp.TbStageSummary(loader('temp_tbstagesummary'))
        this._TbStage = new temp.TbStage(loader('temp_tbstage'))
        this._TbCar = new temp.TbCar(loader('temp_tbcar'))
        this._TbFormula = new temp.TbFormula(loader('temp_tbformula'))
        this._TbObstacle = new temp.TbObstacle(loader('temp_tbobstacle'))
        this._TbBullet = new temp.TbBullet(loader('temp_tbbullet'))
        this._TbRogueSkill = new temp.TbRogueSkill(loader('temp_tbrogueskill'))
        this._TbAccessory = new temp.TbAccessory(loader('temp_tbaccessory'))
        this._TbBlockGrid = new temp.TbBlockGrid(loader('temp_tbblockgrid'))
        this._TbBlockItem = new temp.TbBlockItem(loader('temp_tbblockitem'))
        this._TbBlockRefreshLevel = new temp.TbBlockRefreshLevel(loader('temp_tbblockrefreshlevel'))
        this._TbBlockRefreshLibrary = new temp.TbBlockRefreshLibrary(loader('temp_tbblockrefreshlibrary'))
        this._TbRoguePara = new temp.TbRoguePara(loader('temp_tbroguepara'))
        this._TbPublicRogueSkill = new temp.TbPublicRogueSkill(loader('temp_tbpublicrogueskill'))
        this._TbState = new temp.TbState(loader('temp_tbstate'))
        this._TbStageTd = new temp.TbStageTd(loader('temp_tbstagetd'))
        this._TbCreature = new temp.TbCreature(loader('temp_tbcreature'))
        this._TbStageTdb = new temp.TbStageTdb(loader('temp_tbstagetdb'))
        this._TbMonsterGroup = new temp.TbMonsterGroup(loader('temp_tbmonstergroup'))

        this._TbItem.resolve(this)
        this._TbBubble.resolve(this)
        this._TbConstCar.resolve(this)
        this._TbConstCommon.resolve(this)
        this._TbHero.resolve(this)
        this._TbHeroSkin.resolve(this)
        this._TbHeroLevel.resolve(this)
        this._TbHeroBreak.resolve(this)
        this._TbHeroStar.resolve(this)
        this._TbHeroSkill.resolve(this)
        this._TbWeapon.resolve(this)
        this._TbSkill.resolve(this)
        this._TbSkillEffect.resolve(this)
        this._TbBuff.resolve(this)
        this._TbBattleAttr.resolve(this)
        this._TbEnemyPrototype.resolve(this)
        this._TbEnemy.resolve(this)
        this._TbChapterSummary.resolve(this)
        this._TbStageSummary.resolve(this)
        this._TbStage.resolve(this)
        this._TbCar.resolve(this)
        this._TbFormula.resolve(this)
        this._TbObstacle.resolve(this)
        this._TbBullet.resolve(this)
        this._TbRogueSkill.resolve(this)
        this._TbAccessory.resolve(this)
        this._TbBlockGrid.resolve(this)
        this._TbBlockItem.resolve(this)
        this._TbBlockRefreshLevel.resolve(this)
        this._TbBlockRefreshLibrary.resolve(this)
        this._TbRoguePara.resolve(this)
        this._TbPublicRogueSkill.resolve(this)
        this._TbState.resolve(this)
        this._TbStageTd.resolve(this)
        this._TbCreature.resolve(this)
        this._TbStageTdb.resolve(this)
        this._TbMonsterGroup.resolve(this)
    }
}

